
Project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000240  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000300  08000308  00010308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000300  08000300  00010308  2**0
                  CONTENTS
  4 .ARM          00000000  08000300  08000300  00010308  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000300  08000308  00010308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000300  08000300  00010300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000304  08000304  00010304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000308  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000308  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010308  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000217  00000000  00000000  00010330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001a7  00000000  00000000  00010547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  000106f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000080  00000000  00000000  000107a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000bba  00000000  00000000  00010828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000311  00000000  00000000  000113e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000030ba  00000000  00000000  000116f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000147ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000015c  00000000  00000000  00014800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080002e8 	.word	0x080002e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080002e8 	.word	0x080002e8

08000108 <SystemInit>:
#include "hardware.h"
#include "hardwareIRQs.h"


void SystemInit(void)
{	// SystemInit(): This function is called at startup just after reset and
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0

	// Enable external clock (HSE)
	// RCC_CR_HSEBYP is bit 16
	// RCC_CR_HSEON is bit 18
	// RCC_CR_HSERDY is bit 17 - set to 1 after 6 cycles
	RCC_CR = 0x00050000;
 800010c:	4b0c      	ldr	r3, [pc, #48]	; (8000140 <SystemInit+0x38>)
 800010e:	22a0      	movs	r2, #160	; 0xa0
 8000110:	02d2      	lsls	r2, r2, #11
 8000112:	601a      	str	r2, [r3, #0]
	// Select system clock source as HSE clock
	//  *((volatile unsigned long *)RCC_CFGR)= 0x00000001;
	RCC_CFGR = 0x00000001;
 8000114:	4b0b      	ldr	r3, [pc, #44]	; (8000144 <SystemInit+0x3c>)
 8000116:	2201      	movs	r2, #1
 8000118:	601a      	str	r2, [r3, #0]

	// BIt 17..21 is clock enable for Port A..F
	RCC_AHBENR = 0x003E0000;
 800011a:	4b0b      	ldr	r3, [pc, #44]	; (8000148 <SystemInit+0x40>)
 800011c:	22f8      	movs	r2, #248	; 0xf8
 800011e:	0392      	lsls	r2, r2, #14
 8000120:	601a      	str	r2, [r3, #0]

	// Setup SysTick - 1msec clock
	STK_RVR = 999;		// Number of clocks to count down from.
 8000122:	4b0a      	ldr	r3, [pc, #40]	; (800014c <SystemInit+0x44>)
 8000124:	4a0a      	ldr	r2, [pc, #40]	; (8000150 <SystemInit+0x48>)
 8000126:	601a      	str	r2, [r3, #0]
	STK_CVR = 0;		// Clear count down, undefined on pwr up
 8000128:	4b0a      	ldr	r3, [pc, #40]	; (8000154 <SystemInit+0x4c>)
 800012a:	2200      	movs	r2, #0
 800012c:	601a      	str	r2, [r3, #0]
	STK_CSR |= 0x03;	// Start system tick counting and to request IRQ when reach 0.
 800012e:	4b0a      	ldr	r3, [pc, #40]	; (8000158 <SystemInit+0x50>)
 8000130:	681a      	ldr	r2, [r3, #0]
 8000132:	4b09      	ldr	r3, [pc, #36]	; (8000158 <SystemInit+0x50>)
 8000134:	2103      	movs	r1, #3
 8000136:	430a      	orrs	r2, r1
 8000138:	601a      	str	r2, [r3, #0]
}
 800013a:	46c0      	nop			; (mov r8, r8)
 800013c:	46bd      	mov	sp, r7
 800013e:	bd80      	pop	{r7, pc}
 8000140:	40021000 	.word	0x40021000
 8000144:	40021004 	.word	0x40021004
 8000148:	40021014 	.word	0x40021014
 800014c:	e000e014 	.word	0xe000e014
 8000150:	000003e7 	.word	0x000003e7
 8000154:	e000e018 	.word	0xe000e018
 8000158:	e000e010 	.word	0xe000e010

0800015c <HardwareInit>:



void HardwareInit(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

	GPIOA_MODE |= 0x00000400;	// Set pin 5 as an output
 8000160:	2390      	movs	r3, #144	; 0x90
 8000162:	05db      	lsls	r3, r3, #23
 8000164:	681a      	ldr	r2, [r3, #0]
 8000166:	2390      	movs	r3, #144	; 0x90
 8000168:	05db      	lsls	r3, r3, #23
 800016a:	2180      	movs	r1, #128	; 0x80
 800016c:	00c9      	lsls	r1, r1, #3
 800016e:	430a      	orrs	r2, r1
 8000170:	601a      	str	r2, [r3, #0]
	// GPIOA_OTYPER - outputs default to push-pull, no need to set
	GPIOA_ODR = 0x00000020;	// Write to Bit 5 - Green LED
 8000172:	4b03      	ldr	r3, [pc, #12]	; (8000180 <HardwareInit+0x24>)
 8000174:	2220      	movs	r2, #32
 8000176:	601a      	str	r2, [r3, #0]


}
 8000178:	46c0      	nop			; (mov r8, r8)
 800017a:	46bd      	mov	sp, r7
 800017c:	bd80      	pop	{r7, pc}
 800017e:	46c0      	nop			; (mov r8, r8)
 8000180:	48000014 	.word	0x48000014

08000184 <NMI_Handler>:

unsigned long int msecTimer;


void NMI_Handler(void)
{  // Non-maskable interrupt
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000188:	e7fe      	b.n	8000188 <NMI_Handler+0x4>

0800018a <HardFault_Handler>:
  }
  /* USER CODE END NonMaskableInt_IRQn 1 */
}

void HardFault_Handler(void)
{	// Hard fault interrupt
 800018a:	b580      	push	{r7, lr}
 800018c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800018e:	e7fe      	b.n	800018e <HardFault_Handler+0x4>

08000190 <SVC_Handler>:
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}

void SVC_Handler(void)
{	// System service call via SWI instruction
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000194:	46c0      	nop			; (mov r8, r8)
 8000196:	46bd      	mov	sp, r7
 8000198:	bd80      	pop	{r7, pc}

0800019a <PendSV_Handler>:

void PendSV_Handler(void)
{	// Pendable request for system service
 800019a:	b580      	push	{r7, lr}
 800019c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800019e:	46c0      	nop			; (mov r8, r8)
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}

080001a4 <SysTick_Handler>:

void SysTick_Handler(void)
{  	// System tick timer
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	// Increment global variable "msecTimer" every 1msec, used as application time base.
  msecTimer += 1;	// IRQ occurs every 1 msec, number of msec since last power-up
 80001a8:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <SysTick_Handler+0x14>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	1c5a      	adds	r2, r3, #1
 80001ae:	4b02      	ldr	r3, [pc, #8]	; (80001b8 <SysTick_Handler+0x14>)
 80001b0:	601a      	str	r2, [r3, #0]
}
 80001b2:	46c0      	nop			; (mov r8, r8)
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	2000001c 	.word	0x2000001c

080001bc <main>:
#include "hardware.h"
#include "hardwareIRQs.h"


int main(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b084      	sub	sp, #16
 80001c0:	af00      	add	r7, sp, #0
unsigned long int LED_timer = 0;
 80001c2:	2300      	movs	r3, #0
 80001c4:	60fb      	str	r3, [r7, #12]

	HardwareInit();
 80001c6:	f7ff ffc9 	bl	800015c <HardwareInit>

  while (1)
  {
  	if (msecTimer < 10000)
 80001ca:	4b1d      	ldr	r3, [pc, #116]	; (8000240 <main+0x84>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	4a1d      	ldr	r2, [pc, #116]	; (8000244 <main+0x88>)
 80001d0:	4293      	cmp	r3, r2
 80001d2:	d818      	bhi.n	8000206 <main+0x4a>
  	{	// for first 10 seconds use loop to turn LED on/off
  		for (unsigned long int j=0; j<1; j++)
 80001d4:	2300      	movs	r3, #0
 80001d6:	60bb      	str	r3, [r7, #8]
 80001d8:	e005      	b.n	80001e6 <main+0x2a>
  			GPIOA_ODR = 0x00000000;  // Turn LED off
 80001da:	4b1b      	ldr	r3, [pc, #108]	; (8000248 <main+0x8c>)
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
  		for (unsigned long int j=0; j<1; j++)
 80001e0:	68bb      	ldr	r3, [r7, #8]
 80001e2:	3301      	adds	r3, #1
 80001e4:	60bb      	str	r3, [r7, #8]
 80001e6:	68bb      	ldr	r3, [r7, #8]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d0f6      	beq.n	80001da <main+0x1e>
  		for (unsigned long int j=0; j<1; j++)
 80001ec:	2300      	movs	r3, #0
 80001ee:	607b      	str	r3, [r7, #4]
 80001f0:	e005      	b.n	80001fe <main+0x42>
  			GPIOA_ODR = 0x00000020;  // Turn LED on
 80001f2:	4b15      	ldr	r3, [pc, #84]	; (8000248 <main+0x8c>)
 80001f4:	2220      	movs	r2, #32
 80001f6:	601a      	str	r2, [r3, #0]
  		for (unsigned long int j=0; j<1; j++)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	3301      	adds	r3, #1
 80001fc:	607b      	str	r3, [r7, #4]
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2b00      	cmp	r3, #0
 8000202:	d0f6      	beq.n	80001f2 <main+0x36>
 8000204:	e7e1      	b.n	80001ca <main+0xe>
  	}
  	else
  	{	// use IRQ millisecond timer...
  		if (msecTimer >= LED_timer)
 8000206:	4b0e      	ldr	r3, [pc, #56]	; (8000240 <main+0x84>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	68fa      	ldr	r2, [r7, #12]
 800020c:	429a      	cmp	r2, r3
 800020e:	d8dc      	bhi.n	80001ca <main+0xe>
  		{
  			if ( (GPIOA_ODR & 0x0000020) != 0)
 8000210:	4b0d      	ldr	r3, [pc, #52]	; (8000248 <main+0x8c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	2220      	movs	r2, #32
 8000216:	4013      	ands	r3, r2
 8000218:	d00a      	beq.n	8000230 <main+0x74>
  			{
  				GPIOA_ODR = 0x00000000;  // Turn LED off
 800021a:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <main+0x8c>)
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
  				LED_timer = msecTimer + 1000;
 8000220:	4b07      	ldr	r3, [pc, #28]	; (8000240 <main+0x84>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	22fa      	movs	r2, #250	; 0xfa
 8000226:	0092      	lsls	r2, r2, #2
 8000228:	4694      	mov	ip, r2
 800022a:	4463      	add	r3, ip
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	e7cc      	b.n	80001ca <main+0xe>
  			}
  			else
  			{
  				GPIOA_ODR = 0x00000020;		// Turn LED on
 8000230:	4b05      	ldr	r3, [pc, #20]	; (8000248 <main+0x8c>)
 8000232:	2220      	movs	r2, #32
 8000234:	601a      	str	r2, [r3, #0]
  				LED_timer = msecTimer + 200;
 8000236:	4b02      	ldr	r3, [pc, #8]	; (8000240 <main+0x84>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	33c8      	adds	r3, #200	; 0xc8
 800023c:	60fb      	str	r3, [r7, #12]
  	if (msecTimer < 10000)
 800023e:	e7c4      	b.n	80001ca <main+0xe>
 8000240:	2000001c 	.word	0x2000001c
 8000244:	0000270f 	.word	0x0000270f
 8000248:	48000014 	.word	0x48000014

0800024c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800024c:	480d      	ldr	r0, [pc, #52]	; (8000284 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800024e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000250:	480d      	ldr	r0, [pc, #52]	; (8000288 <LoopForever+0x6>)
  ldr r1, =_edata
 8000252:	490e      	ldr	r1, [pc, #56]	; (800028c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000254:	4a0e      	ldr	r2, [pc, #56]	; (8000290 <LoopForever+0xe>)
  movs r3, #0
 8000256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000258:	e002      	b.n	8000260 <LoopCopyDataInit>

0800025a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800025a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800025c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800025e:	3304      	adds	r3, #4

08000260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000264:	d3f9      	bcc.n	800025a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000266:	4a0b      	ldr	r2, [pc, #44]	; (8000294 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000268:	4c0b      	ldr	r4, [pc, #44]	; (8000298 <LoopForever+0x16>)
  movs r3, #0
 800026a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800026c:	e001      	b.n	8000272 <LoopFillZerobss>

0800026e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800026e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000270:	3204      	adds	r2, #4

08000272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000274:	d3fb      	bcc.n	800026e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000276:	f7ff ff47 	bl	8000108 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800027a:	f000 f811 	bl	80002a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800027e:	f7ff ff9d 	bl	80001bc <main>

08000282 <LoopForever>:

LoopForever:
    b LoopForever
 8000282:	e7fe      	b.n	8000282 <LoopForever>
  ldr   r0, =_estack
 8000284:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800028c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000290:	08000308 	.word	0x08000308
  ldr r2, =_sbss
 8000294:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000298:	20000020 	.word	0x20000020

0800029c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800029c:	e7fe      	b.n	800029c <ADC1_COMP_IRQHandler>
	...

080002a0 <__libc_init_array>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	2600      	movs	r6, #0
 80002a4:	4d0c      	ldr	r5, [pc, #48]	; (80002d8 <__libc_init_array+0x38>)
 80002a6:	4c0d      	ldr	r4, [pc, #52]	; (80002dc <__libc_init_array+0x3c>)
 80002a8:	1b64      	subs	r4, r4, r5
 80002aa:	10a4      	asrs	r4, r4, #2
 80002ac:	42a6      	cmp	r6, r4
 80002ae:	d109      	bne.n	80002c4 <__libc_init_array+0x24>
 80002b0:	2600      	movs	r6, #0
 80002b2:	f000 f819 	bl	80002e8 <_init>
 80002b6:	4d0a      	ldr	r5, [pc, #40]	; (80002e0 <__libc_init_array+0x40>)
 80002b8:	4c0a      	ldr	r4, [pc, #40]	; (80002e4 <__libc_init_array+0x44>)
 80002ba:	1b64      	subs	r4, r4, r5
 80002bc:	10a4      	asrs	r4, r4, #2
 80002be:	42a6      	cmp	r6, r4
 80002c0:	d105      	bne.n	80002ce <__libc_init_array+0x2e>
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	00b3      	lsls	r3, r6, #2
 80002c6:	58eb      	ldr	r3, [r5, r3]
 80002c8:	4798      	blx	r3
 80002ca:	3601      	adds	r6, #1
 80002cc:	e7ee      	b.n	80002ac <__libc_init_array+0xc>
 80002ce:	00b3      	lsls	r3, r6, #2
 80002d0:	58eb      	ldr	r3, [r5, r3]
 80002d2:	4798      	blx	r3
 80002d4:	3601      	adds	r6, #1
 80002d6:	e7f2      	b.n	80002be <__libc_init_array+0x1e>
 80002d8:	08000300 	.word	0x08000300
 80002dc:	08000300 	.word	0x08000300
 80002e0:	08000300 	.word	0x08000300
 80002e4:	08000304 	.word	0x08000304

080002e8 <_init>:
 80002e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ea:	46c0      	nop			; (mov r8, r8)
 80002ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ee:	bc08      	pop	{r3}
 80002f0:	469e      	mov	lr, r3
 80002f2:	4770      	bx	lr

080002f4 <_fini>:
 80002f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002f6:	46c0      	nop			; (mov r8, r8)
 80002f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fa:	bc08      	pop	{r3}
 80002fc:	469e      	mov	lr, r3
 80002fe:	4770      	bx	lr
